{
  "id": "fix-next-route-1.214.1",
  "files": [
    {
      "path": "apps/web/lib/log/state.ts",
      "content": "export type LogLevel = 'DEBUG'|'INFO'|'WARN'|'ERROR';\nexport interface LogEntry { ts: string; level: LogLevel; msg: string; cid?: string; tx?: string; ctx?: Record<string, unknown>; }\n\ntype Client = { id: string; send: (data: string) => void };\n\ndeclare global { var __vt_logStore: { clients: Map<string, Client>; buffer: LogEntry[] } | undefined }\n\nconst createStore = () => ({ clients: new Map<string, Client>(), buffer: [] as LogEntry[] });\nexport const logStore = globalThis.__vt_logStore ?? (globalThis.__vt_logStore = createStore());\n\nexport function snapshot(limit = 200) { return logStore.buffer.slice(-limit); }\n\nexport function publish(entry: LogEntry) {\n  const data = `data: ${JSON.stringify(entry)}\\n\\n`;\n  logStore.buffer.push(entry);\n  if (logStore.buffer.length > 2000) logStore.buffer.splice(0, logStore.buffer.length - 2000);\n  for (const c of logStore.clients.values()) { try { c.send(data); } catch { /* noop */ } }\n}\n\nexport function sseRegister(send: (s: string) => void) {\n  const id = crypto.randomUUID();\n  logStore.clients.set(id, { id, send });\n  return id;\n}\n\nexport function sseUnregister(id: string) { logStore.clients.delete(id); }\n"
    },
    {
      "path": "apps/web/app/api/debug/log/route.ts",
      "content": "import { NextRequest } from 'next/server';\nimport { publish, snapshot, sseRegister, sseUnregister } from '../../../lib/log/state';\n\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\n\nfunction headers() {\n  return {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache, no-transform',\n    'Connection': 'keep-alive',\n    'X-Accel-Buffering': 'no'\n  };\n}\n\nexport async function GET(req: NextRequest) {\n  const enc = new TextEncoder();\n  const stream = new ReadableStream<Uint8Array>({\n    start(controller) {\n      const send = (s: string) => controller.enqueue(enc.encode(s));\n      // initial snapshot\n      for (const e of snapshot(200)) send(`data: ${JSON.stringify(e)}\\n\\n`);\n      // live\n      const id = sseRegister(send);\n      const ping = setInterval(() => send(': ping\\n\\n'), 15000);\n      (controller as any)._cleanup = () => { clearInterval(ping); sseUnregister(id); };\n    },\n    cancel() { const fn = (this as any)._cleanup; if (fn) fn(); }\n  });\n  return new Response(stream, { headers: headers() });\n}\n\nexport async function POST(req: NextRequest) {\n  // allow posting a log entry for testing/dev\n  const body = await req.json().catch(() => ({}));\n  const entry = {\n    ts: new Date().toISOString(),\n    level: (body.level ?? 'INFO') as any,\n    msg: body.msg ?? 'manual log',\n    cid: body.cid,\n    tx: body.tx,\n    ctx: body.ctx ?? {}\n  };\n  publish(entry);\n  return new Response('ok');\n}\n"
    }
  ]
}