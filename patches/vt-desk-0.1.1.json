{
  "id": "vt-desk-0.1.1",
  "files": [
    {
      "path": "tools/vt-desk/server.js",
      "content": "import express from 'express';\nimport cors from 'cors';\nimport fs from 'fs';\nimport path from 'path';\nimport multer from 'multer';\nimport { spawn } from 'child_process';\n\nconst app = express();\nconst PORT = process.env.PORT || 5177;\nconst ROOT = process.cwd();\nconst PATCHES_DIR = path.join(ROOT, 'patches');\nconst RELEASES_DIR = path.join(ROOT, 'releases');\n\n// Light CSP so Chrome DevTools stops complaining, but UI keeps working.\nconst CSP = [\n  \"default-src 'self'\",\n  \"connect-src 'self' http://localhost:5177\",\n  \"script-src 'self' 'unsafe-inline'\",\n  \"style-src 'self' 'unsafe-inline'\",\n  \"img-src 'self' data:\",\n  \"font-src 'self' data:\",\n  \"object-src 'none'\",\n  \"base-uri 'self'\",\n  \"frame-ancestors 'none'\"\n].join('; ');\n\napp.use((req,res,next)=>{ res.setHeader('Content-Security-Policy', CSP); next(); });\napp.use(cors());\napp.use(express.json({limit:'10mb'}));\n\n// Serve UI\napp.use(express.static(path.join(path.dirname(new URL(import.meta.url).pathname), 'ui')));\n\n// Silence Chrome DevTools site config fetch by responding 200 {}\napp.get('/.well-known/appspecific/com.chrome.devtools.json', (req,res)=>{\n  res.type('application/json').send('{}');\n});\n\nfunction listPatches(){\n  if (!fs.existsSync(PATCHES_DIR)) return [];\n  return fs.readdirSync(PATCHES_DIR)\n    .filter(f=> f.endsWith('.json'))\n    .map(f=> ({\n      file: `patches/${f}`,\n      id: (()=>{ try{ const mf = JSON.parse(fs.readFileSync(path.join(PATCHES_DIR,f),'utf8')); return mf.id || f; }catch{return f;} })()\n    }));\n}\nfunction listSnapshots(){\n  if (!fs.existsSync(RELEASES_DIR)) return [];\n  return fs.readdirSync(RELEASES_DIR)\n    .filter(n=> n.endsWith('-snapshot'))\n    .sort()\n    .map(n=> ({ name:n, path:`releases/${n}` }));\n}\nfunction runNode(args, cwd){\n  return new Promise((resolve)=>{\n    const p = spawn(process.execPath, args, { cwd, shell:false });\n    let out=''; let err='';\n    p.stdout.on('data', d=> out += d.toString());\n    p.stderr.on('data', d=> err += d.toString());\n    p.on('close', code=> resolve({code, out, err}));\n  });\n}\nasync function copyDir(src,dst){\n  fs.mkdirSync(dst,{recursive:true});\n  for(const ent of fs.readdirSync(src,{withFileTypes:true})){\n    const s = path.join(src, ent.name);\n    const d = path.join(dst, ent.name);\n    if (ent.isDirectory()) await copyDir(s,d); else fs.copyFileSync(s,d);\n  }\n}\nfunction rimraf(p){\n  if (!fs.existsSync(p)) return;\n  for(const ent of fs.readdirSync(p,{withFileTypes:true})){\n    const fp = path.join(p, ent.name);\n    if (ent.isDirectory()) rimraf(fp); else fs.unlinkSync(fp);\n  }\n  fs.rmdirSync(p);\n}\n\napp.get('/api/patches', (req,res)=> res.json({ items:listPatches() }));\nconst upload = multer({ dest: path.join(process.cwd(),'tmp') });\napp.post('/api/upload', upload.single('file'), (req,res)=>{\n  try{\n    if (!fs.existsSync(PATCHES_DIR)) fs.mkdirSync(PATCHES_DIR, {recursive:true});\n    if (req.file){\n      const to = path.join(PATCHES_DIR, req.file.originalname.replace(/[^A-Za-z0-9._-]/g,''));\n      fs.renameSync(req.file.path, to);\n      return res.json({ ok:true, file:`patches/${path.basename(to)}` });\n    }\n    if (req.body && req.body.name && req.body.content){\n      const to = path.join(PATCHES_DIR, req.body.name.replace(/[^A-Za-z0-9._-]/g,''));\n      fs.writeFileSync(to, req.body.content, 'utf8');\n      return res.json({ ok:true, file:`patches/${path.basename(to)}` });\n    }\n    return res.status(400).json({ ok:false, error:'No file or body' });\n  }catch(e){ return res.status(500).json({ ok:false, error:String(e) }); }\n});\n\napp.post('/api/apply', async (req,res)=>{\n  const { manifestPath, dry } = req.body || {};\n  if (!manifestPath) return res.status(400).json({ ok:false, error:'manifestPath required' });\n  const args = ['tools/vt/patcher.cjs', manifestPath];\n  if (dry) args.push('--dry');\n  const r = await runNode(args, ROOT);\n  res.json({ ok: r.code===0, code:r.code, stdout:r.out, stderr:r.err });\n});\n\napp.get('/api/snapshots', (req,res)=> res.json({ items: listSnapshots() }));\napp.post('/api/snapshot', async (req,res)=>{\n  const r = await runNode(['tools/vt/snapshot.cjs','releases'], ROOT);\n  res.json({ ok:r.code===0, code:r.code, stdout:r.out, stderr:r.err });\n});\napp.post('/api/rollback', async (req,res)=>{\n  const { snapshotName } = req.body || {};\n  if (!snapshotName) return res.status(400).json({ ok:false, error:'snapshotName required' });\n  const src = path.join(RELEASES_DIR, snapshotName);\n  if (!fs.existsSync(src)) return res.status(404).json({ ok:false, error:'snapshot not found' });\n  const ts=new Date().toISOString().replace(/[:.]/g,'-');\n  const backup = path.join(RELEASES_DIR, `_backup-current-${ts}`);\n  fs.mkdirSync(backup, {recursive:true});\n  for(const ent of fs.readdirSync('.', {withFileTypes:true})){\n    if (['node_modules','.next','.git','releases'].includes(ent.name)) continue;\n    const s = path.join('.', ent.name);\n    const d = path.join(backup, ent.name);\n    if (ent.isDirectory()) await copyDir(s,d); else fs.copyFileSync(s,d);\n  }\n  for(const ent of fs.readdirSync(src, {withFileTypes:true})){\n    const s = path.join(src, ent.name);\n    const d = path.join('.', ent.name);\n    if (ent.isDirectory()){\n      if (fs.existsSync(d)) rimraf(d);\n      await copyDir(s,d);\n    } else { fs.copyFileSync(s,d); }\n  }\n  res.json({ ok:true, backup: path.basename(backup) });\n});\n\napp.get('/api/changelogs', (req,res)=>{\n  const files = fs.readdirSync('.', {withFileTypes:true})\n    .filter(e=> e.isFile() && /^CHANGELOG-.*\\.md$/i.test(e.name))\n    .map(e=> e.name).sort();\n  res.json({ items: files });\n});\napp.get('/api/changelog', (req,res)=>{\n  const name = req.query.name;\n  if (!name || typeof name!=='string') return res.status(400).send('name required');\n  if (!/^[A-Za-z0-9._-]+$/.test(name)) return res.status(400).send('bad name');\n  if (!fs.existsSync(name)) return res.status(404).send('not found');\n  res.type('text/markdown').send(fs.readFileSync(name,'utf8'));\n});\n\napp.post('/api/git/push', async (req,res)=>{\n  const { message, tag } = req.body || {};\n  function run(cmd, args){ return new Promise(resolve=>{\n    const p=spawn(cmd,args,{cwd:ROOT, shell:false}); let out=''; let err='';\n    p.stdout.on('data',d=> out+=d.toString()); p.stderr.on('data',d=> err+=d.toString());\n    p.on('close',code=> resolve({code,out,err}));\n  })}\n  const add=await run('git',['add','-A']);\n  const commit=await run('git',['commit','-m', message || 'VT Patch Desk commit']);\n  let tagging = {code:0,out:'',err:''};\n  if (tag) tagging=await run('git',['tag', tag]);\n  const push=await run('git',['push','--follow-tags']);\n  res.json({ ok: push.code===0, add, commit, tagging, push });\n});\n\napp.listen(PORT, ()=> console.log(`VT Patch Desk running at http://localhost:${PORT}`));\n"
    },
    {
      "path": "tools/vt-desk/ui/index.html",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/><title>VT Patch Desk</title><meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; connect-src 'self' http://localhost:5177; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; base-uri 'self'; frame-ancestors 'none'\"> <style>:root{--bg:#0b0f1a;--card:rgba(255,255,255,.06);--border:rgba(255,255,255,.12);--pill:#101622;--txt:#eaeaf0;--acc:#76e3ff}html,body{margin:0;background:var(--bg);color:var(--txt);font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial}.wrap{max-width:1080px;margin:0 auto;padding:20px}h1{font-size:22px;margin:0 0 12px 0}.row{display:flex;gap:16px;flex-wrap:wrap}.card{background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.03));border:1px solid var(--border);border-radius:14px;padding:14px;flex:1;min-width:300px;box-shadow:0 14px 40px rgba(0,0,0,.2)}button,.pill{background:var(--pill);border:1px solid var(--border);color:var(--txt);border-radius:10px;padding:8px 12px;cursor:pointer}input,select,textarea{background:var(--pill);border:1px solid var(--border);color:var(--txt);border-radius:10px;padding:8px 10px;width:100%}table{width:100%;border-collapse:collapse;font-size:14px}th,td{border-top:1px solid var(--border);padding:6px 8px;text-align:left}.muted{opacity:.75}.tag{display:inline-block;padding:2px 6px;border-radius:6px;border:1px solid var(--border);margin-right:6px}.cols{display:grid;grid-template-columns:1fr 1fr;gap:16px}@media (max-width:800px){.cols{grid-template-columns:1fr}}</style></head><body><div class=\"wrap\"><h1>VT Patch Desk</h1><div class=\"row\"><div class=\"card\" style=\"flex:2\"><h3>Patches</h3><div class=\"row\" style=\"align-items:center\"><input id=\"patchFile\" type=\"file\"/><button onclick=\"upload()\">Upload patch</button><button onclick=\"reload()\">Reload list</button><button onclick=\"snapshot()\">Create snapshot</button></div><div style=\"height:10px\"></div><table id=\"patchTable\"><thead><tr><th>ID</th><th>File</th><th>Actions</th></tr></thead><tbody></tbody></table></div><div class=\"card\"><h3>Snapshots</h3><select id=\"snapSel\"></select><div style=\"height:8px\"></div><button onclick=\"rollback()\">Rollback to selection</button></div></div><div class=\"row\"><div class=\"card\"><h3>Apply selected patch</h3><div class=\"cols\"><div><label>Manifest path (from table):</label><input id=\"manifestPath\" placeholder=\"patches/ALL-setup.json\"/></div><div><label>Mode</label><select id=\"mode\"><option value=\"dry\">Dry run</option><option value=\"apply\">Apply</option></select></div></div><div style=\"height:8px\"></div><button onclick=\"applyPatch()\">Run patcher</button><div style=\"height:8px\"></div><pre id=\"out\" class=\"muted\" style=\"white-space:pre-wrap;max-height:220px;overflow:auto\"></pre></div><div class=\"card\"><h3>Changelogs</h3><div class=\"row\" style=\"align-items:center\"><select id=\"clSel\" style=\"flex:1\"></select><button onclick=\"loadCl()\">Open</button></div><div style=\"height:8px\"></div><pre id=\"cl\" style=\"white-space:pre-wrap;max-height:220px;overflow:auto\"></pre></div></div><div class=\"card\"><h3>Git push (optional)</h3><div class=\"cols\"><div><input id=\"msg\" placeholder=\"Commit message\"/></div><div><input id=\"tag\" placeholder=\"Optional tag e.g. v1.215\"/></div></div><div style=\"height:8px\"></div><button onclick=\"gitPush()\">Commit & Push</button><pre id=\"gitout\" class=\"muted\" style=\"white-space:pre-wrap;max-height:220px;overflow:auto\"></pre></div></div><script>async function j(u,o){const r=await fetch(u,Object.assign({headers:{'content-type':'application/json'}},o));if(!r.ok)throw new Error(await r.text());return await r.json()}async function reload(){const p=await j('/api/patches');const tb=document.querySelector('#patchTable tbody');tb.innerHTML='';for(const it of p.items){const tr=document.createElement('tr');tr.innerHTML=`<td>${it.id}</td><td class=\"muted\">${it.file}</td><td><button onclick=\"document.getElementById('manifestPath').value='${it.file}'\">Select</button></td>`;tb.appendChild(tr)}const s=await j('/api/snapshots');const sel=document.getElementById('snapSel');sel.innerHTML='';for(const it of s.items){const o=document.createElement('option');o.value=it.name;o.textContent=it.name;sel.appendChild(o)}const cl=await j('/api/changelogs');const clSel=document.getElementById('clSel');clSel.innerHTML='';for(const f of cl.items){const o=document.createElement('option');o.value=f;o.textContent=f;clSel.appendChild(o)}}async function upload(){const inp=document.getElementById('patchFile');if(!inp.files.length){alert('Pick a JSON file');return}const fd=new FormData();fd.append('file',inp.files[0]);const r=await fetch('/api/upload',{method:'POST',body:fd});if(!r.ok){alert('Upload failed');return}await reload()}async function snapshot(){const r=await j('/api/snapshot',{method:'POST',body:JSON.stringify({})});alert('Snapshot: '+(r.ok?'OK':'Failed'));reload()}async function rollback(){const name=document.getElementById('snapSel').value;if(!name){alert('No snapshot selected');return}const r=await j('/api/rollback',{method:'POST',body:JSON.stringify({snapshotName:name})});alert('Rollback done. Backup: '+r.backup)}async function applyPatch(){const manifestPath=document.getElementById('manifestPath').value.trim();const dry=document.getElementById('mode').value==='dry';const r=await j('/api/apply',{method:'POST',body:JSON.stringify({manifestPath,dry})});const pre=document.getElementById('out');pre.textContent=(r.stdout||'')+'\\n'+(r.stderr||'');if(!r.ok)alert('Patch exited with code '+r.code)}async function loadCl(){const name=document.getElementById('clSel').value;const r=await fetch('/api/changelog?name='+encodeURIComponent(name));document.getElementById('cl').textContent=await r.text()}async function gitPush(){const message=document.getElementById('msg').value||'VT Desk commit';const tag=document.getElementById('tag').value||'';const r=await j('/api/git/push',{method:'POST',body:JSON.stringify({message,tag:tag||undefined})});document.getElementById('gitout').textContent=JSON.stringify(r,null,2);if(!r.ok)alert('Push failed; see output below.')}reload();</script></body></html>"
    }
  ],
  "jsonMerges": [
    {
      "file": "tools/vt-desk/package.json",
      "merge": {
        "scripts": {
          "dev": "node server.js",
          "start": "node server.js"
        }
      }
    },
    {
      "file": "package.json",
      "merge": {
        "scripts": {
          "patchdesk": "npm --prefix tools/vt-desk start",
          "patchdesk:dev": "npm --prefix tools/vt-desk run dev"
        }
      }
    }
  ]
}
